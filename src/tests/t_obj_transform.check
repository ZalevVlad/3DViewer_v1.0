#test test0

parse_obj("./obj_transform/test0",&obj);
v1 = obj_center(obj);
s21_vertex vres = {.x = 0, .y = 0, .z = 0};
    ck_assert_int_eq(fabs(s21_vertex_norm(s21_vertex_diff(v1,vres))) < EPS, 1);
free_obj(&obj);

#test test1
parse_obj("./obj_transform/test1",&obj);
s21_create_matrix(4,4,&matrix1);
s21_vertex dest = {.x = 3, .y = 3, .z = 3}; 
matrix_transform_move(&matrix1, dest);
obj_transform(&matrix1, &obj);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].x - 3) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].y - 3) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].z - 3) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].x - 4) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].y - 3) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].z - 3) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].x - 3) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].y - 4) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].z - 3) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].x - 4) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].y - 4) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].z - 3) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].x - 3) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].y - 3) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].z - 4) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].x - 4) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].y - 3) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].z - 4) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].x - 3) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].y - 4) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].z - 4) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].x - 4) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].y - 4) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].z - 4) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].w - 1.) < EPS, 1);
s21_remove_matrix(&matrix1);
free_obj(&obj);

#test test2
parse_obj("./obj_transform/test1",&obj);
s21_create_matrix(4,4,&matrix1);
matrix_transform_scale(&matrix1, 2.);
obj_transform(&matrix1, &obj);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].x - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].y - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].z - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].x - 2) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].y - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].z - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].x - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].y - 2) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].z - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].x - 2) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].y - 2) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].z - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].x - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].y - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].z - 2) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].x - 2) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].y - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].z - 2) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].x - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].y - 2) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].z - 2) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].x - 2) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].y - 2) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].z - 2) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].w - 1.) < EPS, 1);
s21_remove_matrix(&matrix1);
free_obj(&obj);

#test test3
parse_obj("./obj_transform/test1",&obj);
s21_create_matrix(4,4,&matrix1);
matrix_transform_rotate_x(&matrix1, M_PI);
obj_transform(&matrix1, &obj);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].x - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].y - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].z - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].x - 1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].y - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].z - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].x - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].y - -1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].z - 1.2246467991473532072e-16) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].x - 1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].y - -1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].z - 1.2246467991473532072e-16) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].x - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].y - -1.2246467991473532072e-16) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].z - -1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].x - 1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].y - -1.2246467991473532072e-16) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].z - -1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].x - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].y - -1.000000000000000222) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].z - -0.99999999999999988898) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].x - 1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].y - -1.000000000000000222) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].z - -0.99999999999999988898) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].w - 1.) < EPS, 1);
s21_remove_matrix(&matrix1);
free_obj(&obj);

#test test4
parse_obj("./obj_transform/test1",&obj);
s21_create_matrix(4,4,&matrix1);
matrix_transform_rotate_y(&matrix1, M_PI);
obj_transform(&matrix1, &obj);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].x - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].y - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].z - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].x - -1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].y - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].z - -1.2246467991473532072e-16) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].x - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].y - 1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].z - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].x - -1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].y - 1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].z - -1.2246467991473532072e-16) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].x - 1.2246467991473532072e-16) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].y - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].z - -1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].x - -0.99999999999999988898) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].y - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].z - -1.000000000000000222) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].x - 1.2246467991473532072e-16) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].y - 1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].z - -1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].x - -0.99999999999999988898) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].y - 1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].z - -1.000000000000000222) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].w - 1.) < EPS, 1);
s21_remove_matrix(&matrix1);
free_obj(&obj);

#test test5
parse_obj("./obj_transform/test1",&obj);
s21_create_matrix(4,4,&matrix1);
matrix_transform_rotate_z(&matrix1, M_PI);
obj_transform(&matrix1, &obj);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].x - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].y - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].z - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].x - -1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].y - 1.2246467991473532072e-16) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].z - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].x - -1.2246467991473532072e-16) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].y - -1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].z - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].x - -1.000000000000000222) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].y - -0.99999999999999988898) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].z - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].x - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].y - 0) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].z - 1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].x - -1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].y - 1.2246467991473532072e-16) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].z - 1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].x - -1.2246467991473532072e-16) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].y - -1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].z - 1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].x - -1.000000000000000222) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].y - -0.99999999999999988898) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].z - 1) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].w - 1.) < EPS, 1);
s21_remove_matrix(&matrix1);
free_obj(&obj);

#test test6
parse_obj("./obj_transform/test1",&obj);
s21_vertex move = {3,-4,5,1};
obj_transform_(&obj, move, 4.5, M_PI/7., M_PI/8., -M_PI/9.);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].x - 12.357146917540440256) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].y - -15.633491095536907523) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].z - 22.836240967095001508) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[0].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].x - 16.263879423922400491) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].y - -17.055425441100137363) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].z - 21.114165521452097352) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[1].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].x - 14.445939707163272914) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].y - -12.079189803394051239) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].z - 24.640094344365806478) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[2].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].x - 18.352672213545233149) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].y - -13.501124148957281079) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].z - 22.918018898722902321) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[3].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].x - 13.147327786454768628) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].y - -17.998875851042718921) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].z - 26.581981101277097679) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[4].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].x - 17.054060292836727086) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].y - -19.420810196605948761) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].z - 24.859905655634193522) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[5].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].x - 15.236120576077601285) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].y - -14.444574558899862637) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].z - 28.385834478547899096) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[6].w - 1.) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].x - 19.142853082459559744) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].y - -15.866508904463092477) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].z - 26.663759032904998492) < EPS, 1);
ck_assert_int_eq(fabs(obj.vertexes.vertexes[7].w - 1.) < EPS, 1);
free_obj(&obj);